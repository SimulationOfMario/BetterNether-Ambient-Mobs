plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

def local_bclib = findProject(':BCLib') != null
def local_wunderlib = findProject(':WunderLib') != null

loom {
	accessWidenerPath = file("src/main/resources/betternetherambientmobs.accesswidener")
	runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.strict-validation"
			vmArg "-Dfabric-api.datagen.modid=betternetherambientmobs"

			runDir "build/datagen"
		}
	}
}

repositories {
	mavenCentral()
	//mavenLocal()
	maven { url 'https://jitpack.io' }
	maven { url "https://maven.bai.lol" }
	maven { url 'https://maven.terraformersmc.com' }
	flatDir {
		dirs 'libs'
	}
}

sourceSets {
	main {
		// Add the datagenned files into the jar.
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

	println "Using local BCLib: ${local_bclib}"
	if (local_bclib) {
		implementation project(path: ":BCLib", configuration: 'dev')
	} else {
		modImplementation "com.github.quiqueck:BCLib:${project.bclib_version}"
	}

	//modCompileOnly "dev.emi:emi-fabric:${emi_version}:api"
	//modLocalRuntime "dev.emi:emi-fabric:${emi_version}"

	if (local_wunderlib) {
		println "Using local WunderLib"
		implementation project(path: ":WunderLib", configuration: 'dev')
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}